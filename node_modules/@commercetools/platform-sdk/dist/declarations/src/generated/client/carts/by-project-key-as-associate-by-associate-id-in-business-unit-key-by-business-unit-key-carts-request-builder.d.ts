/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
import { Cart, CartDraft, CartPagedQueryResponse } from "../../models/cart.js";
import { executeRequest, QueryParam } from "../../shared/utils/common-types.js";
import { ApiRequest } from "../../shared/utils/requests-utils.js";
import { ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyCartsReplicateRequestBuilder } from "../replicate/by-project-key-as-associate-by-associate-id-in-business-unit-key-by-business-unit-key-carts-replicate-request-builder.js";
import { ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyCartsByIDRequestBuilder } from "./by-project-key-as-associate-by-associate-id-in-business-unit-key-by-business-unit-key-carts-by-id-request-builder.js";
import { ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyCartsKeyByKeyRequestBuilder } from "./by-project-key-as-associate-by-associate-id-in-business-unit-key-by-business-unit-key-carts-key-by-key-request-builder.js";
/**
 **/
export declare class ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyCartsRequestBuilder {
    protected readonly args: {
        pathArgs: {
            projectKey: string;
            associateId: string;
            businessUnitKey: string;
        };
        executeRequest: executeRequest;
        baseUri?: string;
    };
    constructor(args: {
        pathArgs: {
            projectKey: string;
            associateId: string;
            businessUnitKey: string;
        };
        executeRequest: executeRequest;
        baseUri?: string;
    });
    withKey(childPathArgs: {
        key: string;
    }): ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyCartsKeyByKeyRequestBuilder;
    withId(childPathArgs: {
        ID: string;
    }): ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyCartsByIDRequestBuilder;
    replicate(): ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyCartsReplicateRequestBuilder;
    get(methodArgs?: {
        queryArgs?: {
            expand?: string | string[];
            sort?: string | string[];
            limit?: number;
            offset?: number;
            withTotal?: boolean;
            where?: string | string[];
            [key: string]: QueryParam;
        };
        headers?: {
            [key: string]: string | string[];
        };
    }): ApiRequest<CartPagedQueryResponse>;
    /**
     *	Checks if a Cart exists for a given Query Predicate. Returns a `200 OK` status if any Carts match the Query Predicate or a `404 Not Found` otherwise.
     */
    head(methodArgs?: {
        queryArgs?: {
            where?: string | string[];
            [key: string]: QueryParam;
        };
        headers?: {
            [key: string]: string | string[];
        };
    }): ApiRequest<void>;
    /**
     *	Creates a [Cart](ctp:api:type:Cart) in the [BusinessUnit](ctp:api:type:BusinessUnit) referenced by `businessUnitKey`. As such, the `businessUnit` field on [CartDraft](ctp:api:type:CartDraft) is ignored for this request.
     *	Creating a Cart can fail with an [InvalidOperation](ctp:api:type:InvalidOperationError) if the referenced [ShippingMethod](ctp:api:type:ShippingMethod) in the [CartDraft](ctp:api:type:CartDraft) has a predicate that does not match the Cart.
     *
     */
    post(methodArgs: {
        queryArgs?: {
            expand?: string | string[];
            [key: string]: QueryParam;
        };
        body: CartDraft;
        headers?: {
            [key: string]: string | string[];
        };
    }): ApiRequest<Cart>;
}
