/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
import { Cart, CartDraft, CartPagedQueryResponse } from "../../models/cart.js";
import { executeRequest, QueryParam } from "../../shared/utils/common-types.js";
import { ApiRequest } from "../../shared/utils/requests-utils.js";
import { ByProjectKeyCartsReplicateRequestBuilder } from "../replicate/by-project-key-carts-replicate-request-builder.js";
import { ByProjectKeyCartsByIDRequestBuilder } from "./by-project-key-carts-by-id-request-builder.js";
import { ByProjectKeyCartsCustomerIdByCustomerIdRequestBuilder } from "./by-project-key-carts-customer-id-by-customer-id-request-builder.js";
import { ByProjectKeyCartsKeyByKeyRequestBuilder } from "./by-project-key-carts-key-by-key-request-builder.js";
/**
 **/
export declare class ByProjectKeyCartsRequestBuilder {
    protected readonly args: {
        pathArgs: {
            projectKey: string;
        };
        executeRequest: executeRequest;
        baseUri?: string;
    };
    constructor(args: {
        pathArgs: {
            projectKey: string;
        };
        executeRequest: executeRequest;
        baseUri?: string;
    });
    replicate(): ByProjectKeyCartsReplicateRequestBuilder;
    withCustomerId(childPathArgs: {
        customerId: string;
    }): ByProjectKeyCartsCustomerIdByCustomerIdRequestBuilder;
    withKey(childPathArgs: {
        key: string;
    }): ByProjectKeyCartsKeyByKeyRequestBuilder;
    withId(childPathArgs: {
        ID: string;
    }): ByProjectKeyCartsByIDRequestBuilder;
    get(methodArgs?: {
        queryArgs?: {
            expand?: string | string[];
            sort?: string | string[];
            limit?: number;
            offset?: number;
            withTotal?: boolean;
            where?: string | string[];
            [key: string]: QueryParam;
        };
        headers?: {
            [key: string]: string | string[];
        };
    }): ApiRequest<CartPagedQueryResponse>;
    /**
     *	Checks if a Cart exists for a given Query Predicate. Returns a `200 OK` status if any Carts match the Query Predicate, or a `404 Not Found` otherwise.
     */
    head(methodArgs?: {
        queryArgs?: {
            where?: string | string[];
            [key: string]: QueryParam;
        };
        headers?: {
            [key: string]: string | string[];
        };
    }): ApiRequest<void>;
    /**
     *	Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the
     *	[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft
     *	has a `predicate` that does not match the Cart.
     *
     */
    post(methodArgs: {
        queryArgs?: {
            expand?: string | string[];
            [key: string]: QueryParam;
        };
        body: CartDraft;
        headers?: {
            [key: string]: string | string[];
        };
    }): ApiRequest<Cart>;
}
