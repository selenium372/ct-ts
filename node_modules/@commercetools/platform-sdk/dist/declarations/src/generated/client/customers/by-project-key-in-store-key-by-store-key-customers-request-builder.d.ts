/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */
import { CustomerDraft, CustomerPagedQueryResponse, CustomerSignInResult } from "../../models/customer.js";
import { executeRequest, QueryParam } from "../../shared/utils/common-types.js";
import { ApiRequest } from "../../shared/utils/requests-utils.js";
import { ByProjectKeyInStoreKeyByStoreKeyCustomersEmailConfirmRequestBuilder } from "../confirm/by-project-key-in-store-key-by-store-key-customers-email-confirm-request-builder.js";
import { ByProjectKeyInStoreKeyByStoreKeyCustomersEmailTokenRequestBuilder } from "../email-token/by-project-key-in-store-key-by-store-key-customers-email-token-request-builder.js";
import { ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordTokenRequestBuilder } from "../password-token/by-project-key-in-store-key-by-store-key-customers-password-token-request-builder.js";
import { ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordRequestBuilder } from "../password/by-project-key-in-store-key-by-store-key-customers-password-request-builder.js";
import { ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordResetRequestBuilder } from "../reset/by-project-key-in-store-key-by-store-key-customers-password-reset-request-builder.js";
import { ByProjectKeyInStoreKeyByStoreKeyCustomersByIDRequestBuilder } from "./by-project-key-in-store-key-by-store-key-customers-by-id-request-builder.js";
import { ByProjectKeyInStoreKeyByStoreKeyCustomersEmailTokenByEmailTokenRequestBuilder } from "./by-project-key-in-store-key-by-store-key-customers-email-token-by-email-token-request-builder.js";
import { ByProjectKeyInStoreKeyByStoreKeyCustomersKeyByKeyRequestBuilder } from "./by-project-key-in-store-key-by-store-key-customers-key-by-key-request-builder.js";
import { ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordTokenByPasswordTokenRequestBuilder } from "./by-project-key-in-store-key-by-store-key-customers-password-token-by-password-token-request-builder.js";
/**
 **/
export declare class ByProjectKeyInStoreKeyByStoreKeyCustomersRequestBuilder {
    protected readonly args: {
        pathArgs: {
            projectKey: string;
            storeKey: string;
        };
        executeRequest: executeRequest;
        baseUri?: string;
    };
    constructor(args: {
        pathArgs: {
            projectKey: string;
            storeKey: string;
        };
        executeRequest: executeRequest;
        baseUri?: string;
    });
    withPasswordToken(childPathArgs: {
        passwordToken: string;
    }): ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordTokenByPasswordTokenRequestBuilder;
    withEmailToken(childPathArgs: {
        emailToken: string;
    }): ByProjectKeyInStoreKeyByStoreKeyCustomersEmailTokenByEmailTokenRequestBuilder;
    emailToken(): ByProjectKeyInStoreKeyByStoreKeyCustomersEmailTokenRequestBuilder;
    emailConfirm(): ByProjectKeyInStoreKeyByStoreKeyCustomersEmailConfirmRequestBuilder;
    password(): ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordRequestBuilder;
    passwordReset(): ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordResetRequestBuilder;
    passwordToken(): ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordTokenRequestBuilder;
    withKey(childPathArgs: {
        key: string;
    }): ByProjectKeyInStoreKeyByStoreKeyCustomersKeyByKeyRequestBuilder;
    withId(childPathArgs: {
        ID: string;
    }): ByProjectKeyInStoreKeyByStoreKeyCustomersByIDRequestBuilder;
    get(methodArgs?: {
        queryArgs?: {
            expand?: string | string[];
            sort?: string | string[];
            limit?: number;
            offset?: number;
            withTotal?: boolean;
            where?: string | string[];
            [key: string]: QueryParam;
        };
        headers?: {
            [key: string]: string | string[];
        };
    }): ApiRequest<CustomerPagedQueryResponse>;
    /**
     *	Checks if a Customer exists for a given Query Predicate. Returns a `200 OK` status if any Customers match the Query Predicate or a `404 Not Found` otherwise.
     */
    head(methodArgs?: {
        queryArgs?: {
            where?: string | string[];
            [key: string]: QueryParam;
        };
        headers?: {
            [key: string]: string | string[];
        };
    }): ApiRequest<void>;
    /**
     *	When using this endpoint, if omitted, the Customer `stores` field is set to the [Store](ctp:api:type:Store) specified in the path parameter.
     *
     *	If the `anonymousCart` field is set on the [CustomerDraft](ctp:api:type:CustomerDraft), then the newly created Customer will be assigned to that [Cart](ctp:api:type:Cart).
     *	Similarly, if the `anonymousId` field is set, the Customer will be set on all [Carts](ctp:api:type:Cart), [Orders](ctp:api:type:Order), [ShoppingLists](ctp:api:type:ShoppingList) and [Payments](ctp:api:type:Payment) with the same `anonymousId`.
     *	If a Cart with a `store` field specified, the `store` field must reference the same [Store](ctp:api:type:Store) specified in the `{storeKey}` path parameter.
     *	Creating a Customer produces the [CustomerCreated](ctp:api:type:CustomerCreatedMessage) Message.
     *
     */
    post(methodArgs: {
        queryArgs?: {
            expand?: string | string[];
            [key: string]: QueryParam;
        };
        body: CustomerDraft;
        headers?: {
            [key: string]: string | string[];
        };
    }): ApiRequest<CustomerSignInResult>;
}
